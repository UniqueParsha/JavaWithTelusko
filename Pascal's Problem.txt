1)Recursion python :-

def pascal_triangle(row, col):
    if col == 0 or col == row:
        return 1
    else:
        return pascal_triangle(row - 1, col - 1) + pascal_triangle(row - 1, col)

def print_pascal_triangle(n):
    for i in range(n):
        for j in range(i + 1):
            print(pascal_triangle(i, j), end=" ")
        print()

# Example usage:
n_rows = 5
print_pascal_triangle(n_rows)


2)Iteration python:-

def print_pascal_triangle(n):
    triangle = []

    for i in range(n):
        row = []
        for j in range(i + 1):
            if j == 0 or j == i:
                row.append(1)
            else:
                value = triangle[i - 1][j - 1] + triangle[i - 1][j]
                row.append(value)
        triangle.append(row)

    # Print the triangle
    for row in triangle:
        for num in row:
            print(num, end=" ")
        print()

# Example usage:
n_rows = 5
print_pascal_triangle(n_rows)

3)Memorization python


def pascal_triangle(row, col, memo={}):
    if col == 0 or col == row:
        return 1
    
    if (row, col) in memo:
        return memo[(row, col)]
    
    value = pascal_triangle(row - 1, col - 1) + pascal_triangle(row - 1, col)
    memo[(row, col)] = value   
    
    return value

def print_pascal_triangle(n):
    for i in range(n):
        for j in range(i + 1):
            print(pascal_triangle(i, j), end=" ")
        print()

# Example usage:
n_rows = 5
print_pascal_triangle(n_rows)









1)Recursion java

public class PascalTriangle {

    public static int pascalTriangle(int row, int col) {
        if (col == 0 || col == row) {
            return 1;
        } else {
            return pascalTriangle(row - 1, col - 1) + pascalTriangle(row - 1, col);
        }
    }
    public static void printPascalTriangle(int n) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= i; j++) {
                System.out.print(pascalTriangle(i, j) + " ");
            }
            System.out.println();
        }
    }
    public static void main(String[] args) {
        int nRows = 5;
        printPascalTriangle(nRows);
    }
}




2)Iteration java

public class PascalTriangle {

    public static void printPascalTriangle(int n) {
        int[][] triangle = new int[n][];
        
        for (int i = 0; i < n; i++) {
            triangle[i] = new int[i + 1];
            triangle[i][0] = 1;
            triangle[i][i] = 1;
            
            for (int j = 1; j < i; j++) {
                triangle[i][j] = triangle[i - 1][j - 1] + triangle[i - 1][j];
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= i; j++) {
                System.out.print(triangle[i][j] + " ");
            }
            System.out.println();
        }
    }
    public static void main(String[] args) {
        int nRows = 5;
        printPascalTriangle(nRows);
    }
}



3)Memorization java


import java.util.HashMap;
import java.util.Map;

public class PascalTriangle {

    public static int pascalTriangle(int row, int col, Map<String, Integer> memo) {
        if (col == 0 || col == row) {
            return 1;
        }       
        String key = row + "," + col;
        if (memo.containsKey(key)) {
            return memo.get(key);
        }        
        int value = pascalTriangle(row - 1, col - 1, memo) + pascalTriangle(row - 1, col, memo);
        memo.put(key, value);
        
        return value;
    }
    public static void printPascalTriangle(int n) {
        Map<String, Integer> memo = new HashMap<>();
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= i; j++) {
                System.out.print(pascalTriangle(i, j, memo) + " ");
            }
            System.out.println();
        }
    }
    public static void main(String[] args) {
        int nRows = 5;
        printPascalTriangle(nRows);
    }
}





1)Recursion c


#include <stdio.h>
int pascalTriangle(int row, int col) {
    if (col == 0 || col == row) {
        return 1;
    } else {
        return pascalTriangle(row - 1, col - 1) + pascalTriangle(row - 1, col);
    }
}
void printPascalTriangle(int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j <= i; j++) {
            printf("%d ", pascalTriangle(i, j));
        }
        printf("\n");
    }
}
int main() {
    int nRows = 5;
    printPascalTriangle(nRows);
    return 0;
}




2)Iteration c


#include <stdio.h>

void printPascalTriangle(int n) {
    int triangle[n][n];
 
    for (int i = 0; i < n; i++) {
        for (int j = 0; j <= i; j++) {
            if (j == 0 || j == i) {
                triangle[i][j] = 1;
            } else {
                triangle[i][j] = triangle[i - 1][j - 1] + triangle[i - 1][j];
            }
            printf("%d ", triangle[i][j]);
        }
        printf("\n");
    }
}
int main() {
    int nRows = 5;
    printPascalTriangle(nRows);
    return 0;
}




3)Memorization c


#include <stdio.h>
#define MAX_ROWS 100
int memo[MAX_ROWS][MAX_ROWS];
int pascalTriangle(int row, int col) {
    if (col == 0 || col == row) {
        return 1;
    }   
    if (memo[row][col] != 0) {
        return memo[row][col];
    }   
    memo[row][col] = pascalTriangle(row - 1, col - 1) + pascalTriangle(row - 1, col);    
    return memo[row][col];
}

void printPascalTriangle(int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j <= i; j++) {
            printf("%d ", pascalTriangle(i, j));
        }
        printf("\n");
    }
}
int main() {
    int nRows = 5;   
    // Initialize memo array with zeros
    for (int i = 0; i < MAX_ROWS; i++) {
        for (int j = 0; j < MAX_ROWS; j++) {
            memo[i][j] = 0;
        }
    }  
    printPascalTriangle(nRows);
    return 0;
}


1)Recursion js

function pascalTriangle(row, col) {
  if (col === 0 || col === row) {
    return 1;
  } else {
    return pascalTriangle(row - 1, col - 1) + pascalTriangle(row - 1, col);
  }
}
function printPascalTriangle(n) {
  for (let i = 0; i < n; i++) {
    let row = '';
    for (let j = 0; j <= i; j++) {
      row += pascalTriangle(i, j) + ' ';
    }
    console.log(row);
  }
}

const nRows = 5;
printPascalTriangle(nRows);


2)Iteration js


function printPascalTriangle(n) {
  let triangle = [];

  for (let i = 0; i < n; i++) {
    triangle[i] = [];
    triangle[i][0] = 1;
    triangle[i][i] = 1;
    for (let j = 1; j < i; j++) {
      triangle[i][j] = triangle[i - 1][j - 1] + triangle[i - 1][j];
    }
  }

  for (let i = 0; i < n; i++) {
    let row = "";
    for (let j = 0; j <= i; j++) {
      row += triangle[i][j] + " ";
    }
    console.log(row);
  }
}
const nRows = 5;
printPascalTriangle(nRows);



3)Memorization js



function pascalTriangle(row, col, memo) {
  if (col === 0 || col === row) {
    return 1;
  }

  const key = `${row},${col}`;
  if (memo.has(key)) {
    return memo.get(key);
  }

  const value = pascalTriangle(row - 1, col - 1, memo) + pascalTriangle(row - 1, col, memo);
  memo.set(key, value);

  return value;
}

function printPascalTriangle(n) {
  const memo = new Map();

  for (let i = 0; i < n; i++) {
    let row = "";
    for (let j = 0; j <= i; j++) {
      row += pascalTriangle(i, j, memo) + " ";
    }
    console.log(row);
  }
}

const nRows = 5;
printPascalTriangle(nRows);





Algorithms:



Sure! Here's the algorithmic explanation of Pascal's Triangle generation codes in different programming languages:

Pascal's Triangle using recursion (Python):

Define a function pascal_triangle(row, col) that takes the row and column indices as arguments.
Base case: If the column is 0 or equal to the row, return 1.
Recursive case: Calculate the value at the current position by recursively calling pascal_triangle for the previous row and adjacent columns.
Define a function print_pascal_triangle(n) that takes the number of rows n as an argument.
Iterate from 0 to n-1 and for each row, iterate from 0 to the current row.
Call pascal_triangle with the current row and column and print the calculated values.
Pascal's Triangle using iteration (Python):

Define a function print_pascal_triangle(n) that takes the number of rows n as an argument.
Create an empty list triangle.
Iterate from 0 to n-1 and for each row:
Create an empty list row to store the values of the current row.
Set the first and last positions of the row to 1.
For positions in between, calculate the value by summing the values from the previous row.
Append the row to the triangle.
Iterate through each row of the triangle and print the values.
Pascal's Triangle using memoization (Python):

Define a function pascal_triangle(row, col, memo) that takes the row, column indices, and a memoization dictionary as arguments.
Base case: If the column is 0 or equal to the row, return 1.
Check if the value for the given row and column is already computed and stored in the memoization dictionary. If found, return the value.
Otherwise, calculate the value by recursively calling pascal_triangle for the previous row and adjacent columns. Store the value in the memoization dictionary.
Define a function print_pascal_triangle(n) that takes the number of rows n as an argument.
Create an empty memoization dictionary.
Iterate from 0 to n-1 and for each row, iterate from 0 to the current row.
Call pascal_triangle with the current row, column, and memoization dictionary, and print the calculated values.
Pascal's Triangle using iteration (Java):

Create a function printPascalTriangle(int n) that takes the number of rows n as an argument.
Create a 2-dimensional array triangle with n rows and n columns to store the triangle values.
Iterate from 0 to n-1 and for each row I, iterate from 0 to i.
For each position (i, j):
If j is 0 or equal to I, assign 1 to triangle[i][j].
Otherwise, calculate the value by summing the values from the previous row: triangle[i][j] = triangle[i-1][j-1] + triangle[i-1][j].
Iterate through each row of the triangle and print the values.
Pascal's Triangle using memoization (Java):

Create a function int pascal triangle (int row, int col, int[][] memo) that takes the row, column indices, and a memoization 2-dimensional array as arguments.
Base case: If the column is 0 or equal to the row, return 1.
Check if the value for the given row and column is already computed and stored in the memoization array. If found, return the value.
Otherwise, calculate the value by recursively calling pascalTriangle for the previous row and adjacent columns. Store the value in the memoization array.
Create a function void printPascalTriangle(int n) that takes the number of rows n as an argument.
Create a 2-dimensional array memo of size n to store the computed values.
Iterate from 0 to n-1 and for each row, iterate from 0 to the current row.
Call the pascal triangle with the current row, column, and memoization array, and print the calculated values.
Pascal's Triangle using recursion (C):

Define a function int pascal triangle (int row, int col) that takes the row and column indices as arguments.
Base case: If the column is 0 or equal to the row, return 1.
Recursive case: Calculate the value at the current position by recursively calling pascalTriangle for the previous row and adjacent columns.
Define a function void printPascalTriangle(int n) that takes the number of rows n as an argument.
Iterate from 0 to n-1 and for each row, iterate from 0 to the current row.
Call the Pascal triangle with the current row and column and print the calculated values.
Pascal's Triangle using iteration (C):

Define a function void printPascalTriangle(int n) that takes the number of rows n as an argument.
Create a 2-dimensional array triangle with n rows and n columns to store the triangle values.
Iterate from 0 to n-1 and for each row I, iterate from 0 to i.
For each position (i, j):
If j is 0 or equal to I, assign 1 to triangle[i][j].
Otherwise, calculate the value by summing the values from the previous row: triangle[i][j] = triangle[i-1][j-1] + triangle[i-1][j].
Iterate through each row of the triangle and print the values.
Pascal's Triangle using memoization (C):

Define a function int Pascal triangle (int row, int col, int memo[MAX_ROWS][MAX_ROWS]) that takes the row, column indices, and a memoization array as arguments.
Base case: If the column is 0 or equal to the row, return 1.
Check if the value for the given row and column is already computed and stored in the memoization array. If found, return the value.
Otherwise, calculate the value by recursively calling pascalTriangle for the previous row and adjacent columns. Store the value in the memoization array.
Define a function void printPascalTriangle(int n) that takes the number of rows n as an argument.
Create a 2-dimensional array memo of size MAX_ROWS to store the computed values.
Iterate from 0 to n-1 and for each row, iterate from 0 to the current row.
Call the Pascal triangle with the current row, column, and memoization array, and print the calculated values.


